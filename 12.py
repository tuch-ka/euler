"""
Последовательность треугольных чисел образуется путем сложения натуральных чисел. К примеру, 7-ое треугольное
число равно 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. Первые десять треугольных чисел:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Перечислим делители первых семи треугольных чисел:

     1: 1
     3: 1, 3
     6: 1, 2, 3, 6
    10: 1, 2, 5, 10
    15: 1, 3, 5, 15
    21: 1, 3, 7, 21
    28: 1, 2, 4, 7, 14, 28

Как мы видим, 28 - первое треугольное число, у которого более пяти делителей.

Каково первое треугольное число, у которого более пятисот делителей?
"""
import math


def is_perf_sq(n):
    x = math.ceil((math.sqrt(n)))
    if x * x == n:
        return True
    else:
        return False


def max_triangular(m):
    x = 3                                       # начинаем считать от третьего треугольного числа
    n = 2                                       # количество делителей минимум 2 (единица и само число)
    triangular = 1

    while n <= m:                               # пока не найдём нужное количество делителей
        n = 2
        triangular = sum([c for c in range(1, x+1)])    # треугольное число
        sqrt = math.ceil(math.sqrt(triangular))         # округленный квадратный корень

        for i in range(2, sqrt):                        # считаем только до корня, потом значения продублируются ->
            if triangular % i == 0:
                n += 2
        if sqrt ** 2 == triangular:                     # -> кроме ситуации, когда корень является 'точным'
            n -= 1
        x += 1

    return triangular


print(max_triangular(500))
